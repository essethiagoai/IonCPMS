#!/bin/bash

# Script de Setup do CitrineOS para √çon CPMS
# Este script automatiza a instala√ß√£o e configura√ß√£o do CitrineOS

set -e  # Para o script se houver erro

echo "üöÄ Iniciando setup do CitrineOS para √çon CPMS..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para verificar vers√£o do Node.js
check_node_version() {
    if command_exists node; then
        NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
        if [ "$NODE_VERSION" -ge 18 ]; then
            echo -e "${GREEN}‚úÖ Node.js vers√£o $(node --version) - OK${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Node.js vers√£o $(node --version) - Requer vers√£o 18 ou superior${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Node.js n√£o encontrado${NC}"
        return 1
    fi
}

# Verificar pr√©-requisitos
echo -e "${BLUE}üîç Verificando pr√©-requisitos...${NC}"

# Verificar Git
if command_exists git; then
    echo -e "${GREEN}‚úÖ Git $(git --version) - OK${NC}"
else
    echo -e "${RED}‚ùå Git n√£o encontrado. Instale o Xcode Command Line Tools primeiro.${NC}"
    exit 1
fi

# Verificar Node.js
if ! check_node_version; then
    echo -e "${YELLOW}‚ö†Ô∏è  Instale o Node.js vers√£o 18+ antes de continuar${NC}"
    exit 1
fi

# Verificar npm
if command_exists npm; then
    echo -e "${GREEN}‚úÖ npm $(npm --version) - OK${NC}"
else
    echo -e "${RED}‚ùå npm n√£o encontrado${NC}"
    exit 1
fi

# Verificar Docker
if command_exists docker; then
    echo -e "${GREEN}‚úÖ Docker $(docker --version) - OK${NC}"
    
    # Verificar se Docker est√° rodando
    if docker info >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Docker est√° rodando - OK${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Docker n√£o est√° rodando. Inicie o Docker Desktop.${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå Docker n√£o encontrado. Instale o Docker Desktop.${NC}"
    exit 1
fi

# Verificar Docker Compose
if command_exists docker-compose || docker compose version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Docker Compose - OK${NC}"
else
    echo -e "${RED}‚ùå Docker Compose n√£o encontrado${NC}"
    exit 1
fi

echo -e "${GREEN}üéâ Todos os pr√©-requisitos est√£o OK!${NC}"

# Clonar reposit√≥rio CitrineOS
echo -e "${BLUE}üì• Clonando reposit√≥rio CitrineOS...${NC}"

if [ -d "citrineos-core" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Diret√≥rio citrineos-core j√° existe. Removendo...${NC}"
    rm -rf citrineos-core
fi

git clone https://github.com/citrineos/citrineos-core.git
echo -e "${GREEN}‚úÖ Reposit√≥rio clonado com sucesso!${NC}"

# Navegar para o diret√≥rio Server
cd citrineos-core/Server

# Verificar se docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå Arquivo docker-compose.yml n√£o encontrado em citrineos-core/Server${NC}"
    exit 1
fi

echo -e "${BLUE}üê≥ Iniciando servi√ßos do CitrineOS...${NC}"

# Iniciar servi√ßos com Docker Compose
docker compose up -d

echo -e "${GREEN}üéâ CitrineOS iniciado com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Servi√ßos dispon√≠veis:${NC}"
echo -e "  ‚Ä¢ Citrine OCPP HTTP Server: ${GREEN}http://localhost:8080${NC}"
echo -e "  ‚Ä¢ Documenta√ß√£o API: ${GREEN}http://localhost:8080/docs${NC}"
echo -e "  ‚Ä¢ OCPP WebSocket (N√£o Seguro): ${GREEN}ws://localhost:8081${NC}"
echo -e "  ‚Ä¢ OCPP WebSocket (Seguro): ${GREEN}wss://localhost:8082${NC}"
echo -e "  ‚Ä¢ PostgreSQL: ${GREEN}postgresql://citrine:citrine@localhost:5432/citrine${NC}"
echo -e "  ‚Ä¢ RabbitMQ: ${GREEN}amqp://guest:guest@localhost:5672${NC}"
echo ""
echo -e "${YELLOW}üí° Para parar os servi√ßos, execute: docker compose down${NC}"
echo -e "${YELLOW}üí° Para ver logs, execute: docker compose logs -f${NC}"
echo ""
echo -e "${GREEN}üöÄ Setup conclu√≠do! Acesse http://localhost:8080/docs para come√ßar.${NC}"
